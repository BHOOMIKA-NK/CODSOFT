# -*- coding: utf-8 -*-
"""Task3- Iris flower classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EyXf_G-74MrF_gXxNjMHfXpum5_6lGve

**IRIS FLOWER CLASSIFICATION**

**Task 3 : Problem Statement**

1.The Iris flower dataset consists of three species: setosa, versicolor, and virginica. These species can be distinguished based on their measurements.Now imagine that you have the measurements of Iris flowers categorized by their respective species. Your objective is to train a machine learning model that can learn from these measurements and accurately classify the Iris flowers into their respective species.

2.Use the Iris dataset to develop a model that can classify iris flowers into different speccies based on their and petal measurements. This dataset is widely used for introductory classification tasks.
"""

# Importing the required libraries

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Loading the dataset

iris=pd.read_csv('/content/IRIS.csv')

#Showing first 5 rows of dataframe
iris.head()

# Getting information about data

iris.info()

# checking null values

iris.isnull().sum()

# Getting statstical data
iris.describe()

# to display number of samples on each class

iris['species'].value_counts()

# Visual representation

iris['sepal_length'].hist()
plt.title('Sepal length')

iris['sepal_width'].hist()
plt.title('Sepal width')

iris['petal_length'].hist()
plt.title('petal_length')

iris['petal_width'].hist()
plt.title('petal_width')

# Scatter plot
colors=['red','orange','blue']
species=['Iris-setosa','Iris-versicolor','Iris-virginica']

for i in range(3):
    x=iris[iris['species']==species[i]]
    plt.scatter(x['sepal_length'],x['sepal_width'],c=colors[i],label=species[i])
plt.xlabel('sepal_length')
plt.ylabel('sepal_width')
plt.title('Sepal')
plt.legend()

colors=['red','orange','blue']
species=['Iris-setosa','Iris-versicolor','Iris-virginica']

for i in range(3):
    x=iris[iris['species']==species[i]]
    plt.scatter(x['petal_length'],x['petal_width'],c=colors[i],label=species[i])
plt.xlabel('petal_length')
plt.ylabel('petal_width')
plt.title('Petal')
plt.legend()

# coorelation matrix
iris.corr()

Corr=iris.corr()
fig, ax=plt.subplots(figsize=(5,4))
sns.heatmap(Corr, annot=True, ax=ax)

# Label Encoder

le=LabelEncoder()

iris['species']=le.fit_transform(iris['species'])
iris.head()

X=iris.drop(columns=['species'])
Y=iris['species']

"""**Split into train and test data**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""**Model training**"""

model=KNeighborsClassifier()

model.fit(X_train, Y_train)

"""**Model Evaluation**"""

# accuracy on training data

X_train_prediction=model.predict(X_train)

print(X_train_prediction)

training_data_accuracy =accuracy_score(Y_train, X_train_prediction)

print('Accuracy score of training data :{:.2f}%'.format(training_data_accuracy*100 ))

# Accuracy on test data

X_test_prediction =model.predict(X_test)

print(X_test_prediction)

testing_data_accuracy=accuracy_score(Y_test,X_test_prediction)

print('Accuracy score of testing data :{:.2f}%'.format(testing_data_accuracy*100 ))



"""**Classification Report **: It consists of precision, recall, F1 score"""

from sklearn.metrics import confusion_matrix

from sklearn.metrics import classification_report

confusion_matrix(Y_test,X_test_prediction)

print(classification_report(Y_test,X_test_prediction))

"""**Conclusion**

The KNN(K- Nearest Neighbors) algorithm is simple yet effective classification method.It predicts the class label of new data point with full accuracy. This model is effective for given Iris flower dataset
"""

