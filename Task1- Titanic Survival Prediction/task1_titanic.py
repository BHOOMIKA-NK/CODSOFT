# -*- coding: utf-8 -*-
"""Task1-Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UoQgQ9l4OKSvpqnM5OYaqfBzLDcwJkFM

**Titanic Survival Prediction**

**Task 01** : The Titanic dataset is used to build a model that predicts whether a
passenger on the Titanic survived or not. This is a classic beginner
project with readily available data. The dataset typically used for this project contains information
about individual passengers, such as their age, gender, ticket
class, fare, cabin, and whether or not they survived.

**Work Flow **

1.Data loading

2.Data pre-processing

3.Exploratory Data analysis

4.Spliting training and test data

5.Model training -Logistic Regression

6.Model Evaluation
"""

# Importing required libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Data loading
titanic=pd.read_csv('/content/tested.csv')
titanic

#Shows first 5 rows of data frame
titanic.head()

"""**Data pre-processing**"""

# To check number of rows and columns

titanic.shape

# to get infomation about the data
 titanic.info()

# checking missing values
titanic.isnull().sum()

# droping the cabin column from the dataframe because majority of values are missing.

titanic=titanic.drop(columns='Cabin',axis=1)

# replacing missing values in age columns with its mean value
# replacing missing values in fare columns with its mean value

titanic['Age'].fillna(titanic['Age'].mean(), inplace=True)
titanic['Fare'].fillna(titanic['Fare'].mean(), inplace=True)

# Verifying the missing values

titanic.isnull().sum()

"""**Exploratory Data Analysis (EDA)**

"""

# statstical data

titanic.describe()

# finding the number of people survived and not survived

titanic['Survived'].value_counts()

# Data Visualization

sns.set()

# Survivors countplot
import matplotlib.pyplot as plt
fig = plt.figure(figsize =(10, 7))

column = 'Survived'

# Create a bar chart
survival_counts = titanic[column].value_counts()
survival_counts.plot(kind='bar', rot=0)

# Adding labels and title
plt.xlabel('Survived')
plt.ylabel('Count')
plt.title('Survival Count (0 = No, 1 = Yes)')

# Show the plot
plt.show()

# Survival based on age wise
fig = plt.figure(figsize =(10, 7))
plt.hist(x = [titanic[titanic['Survived']==1]['Age'], titanic[titanic['Survived']==0]['Age']],stacked=True, color = ['g','r'],label = ['Survived','Not survived'])
plt.title('Histogram of Survival based on age')
plt.xlabel('Age')
plt.ylabel('No of passengers')
plt.legend()

# survival based on fare wise
fig = plt.figure(figsize =(10, 7))
plt.hist(x = [titanic[titanic['Survived']==1]['Fare'], titanic[titanic['Survived']==0]['Fare']], stacked=True, color = ['g','b'],label = ['Survived','Not survived'])
plt.title(' Histogram of Survival based on fare')
plt.xlabel('Fare')
plt.ylabel('No of passengers')
plt.legend()

titanic['Sex'].value_counts()

# survival based on gender
fig = plt.figure(figsize =(9, 7))
plt.hist(x = [titanic[titanic['Survived']==1]['Sex'], titanic[titanic['Survived']==0]['Sex']], stacked=True, color = ['g','r'],label = ['Female','Male'])
plt.title(' Histogram of passengers based on Gender')
plt.xlabel('Gender')
plt.ylabel('No of passengers')
plt.legend()

# encoding the categorical columns

titanic['Embarked'].value_counts()

# converting categorical columns into numerical columns

titanic.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic.head()

# Separating features and Target

X=titanic.drop(columns=['PassengerId','Name','Ticket','Survived'], axis=1)
Y=titanic['Survived']

print(X)

print(Y)

"""**Spliting training and test data**"""

X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""**Model Training - Logistic Regression**"""

#Logestic Regresssion

model=LogisticRegression()

model.fit(X_train, Y_train)

"""**Model Evaluation**"""



# accuracy on training data

X_train_prediction=model.predict(X_train)

print(X_train_prediction)

training_data_accuracy=accuracy_score(Y_train,X_train_prediction)

print('Accuracy score of training data :{:.2f}%'.format(training_data_accuracy*100 ))

#accuracy on test data

X_test_prediction=model.predict(X_test)

print(X_test_prediction)

testing_data_accuracy=accuracy_score(Y_test,X_test_prediction)

print('Accuracy score of test data :{:.2f}%'.format(testing_data_accuracy*100 ))

"""**Conclusion**

The logistic algorithm is likely to be a very strong model for the given problem.It has learned the underlying patterns and  is capable of making accurate predictions in training data on given 'Titanic' dataset.
"""

